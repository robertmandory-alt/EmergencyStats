import { db } from "./db";
import { 
  users, 
  personnel, 
  workShifts, 
  bases, 
  baseProfiles,
  baseMembers 
} from "@shared/schema";
import { eq } from "drizzle-orm";

export async function seedDatabase() {
  console.log("üå± ÿ¥ÿ±Ÿàÿπ seed ⁄©ÿ±ÿØŸÜ ÿØ€åÿ™ÿßÿ®€åÿ≥...");

  try {
    // Create default admin user
    const [adminUser] = await db.insert(users).values({
      username: "admin",
      password: "admin1", // In production, this should be hashed
      role: "admin",
      isActive: true,
      fullName: "ŸÖÿØ€åÿ± ÿ≥€åÿ≥ÿ™ŸÖ"
    }).onConflictDoNothing().returning();

    console.log("‚úÖ ⁄©ÿßÿ±ÿ®ÿ± ÿßÿØŸÖ€åŸÜ ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ");

    // Create the required "ems" user with password "1234"
    const [emsUser] = await db.insert(users).values({
      username: "ems",
      password: "1234", // In production, this should be hashed
      role: "user",
      isActive: true,
      fullName: "ÿ≥ÿ±Ÿæÿ±ÿ≥ÿ™ Ÿæÿß€å⁄ØÿßŸá ÿßŸàÿ±⁄òÿßŸÜÿ≥"
    }).onConflictDoNothing().returning();

    console.log("‚úÖ ⁄©ÿßÿ±ÿ®ÿ± ems ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ");

    // Create a sample regular user for testing
    const [regularUser] = await db.insert(users).values({
      username: "supervisor1",
      password: "supervisor1", // In production, this should be hashed
      role: "user",
      isActive: true,
      fullName: "ÿ≥ÿ±Ÿæÿ±ÿ≥ÿ™ Ÿæÿß€å⁄ØÿßŸá €±€∞€±"
    }).onConflictDoNothing().returning();

    console.log("‚úÖ ⁄©ÿßÿ±ÿ®ÿ± ŸÖÿπŸÖŸàŸÑ€å ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ");

    // Create default work shifts
    const defaultShifts = [
      { title: "€≤€¥ ÿ≥ÿßÿπÿ™Ÿá", equivalentHours: 24, shiftCode: "273" },
      { title: "ÿ∑ŸàŸÑÿßŸÜ€å", equivalentHours: 12, shiftCode: "345" },
      { title: "ÿ¥ÿ®", equivalentHours: 8, shiftCode: "121" },
      { title: "€≤€¥ ÿ≥ÿßÿπÿ™Ÿá ÿ™ÿπÿ∑€åŸÑ", equivalentHours: 24, shiftCode: "274" }
    ];

    for (const shift of defaultShifts) {
      await db.insert(workShifts).values(shift).onConflictDoNothing();
    }

    console.log("‚úÖ ÿ¥€åŸÅÿ™‚ÄåŸáÿß€å Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ");

    // Create default bases
    const defaultBases = [
      { name: "Ÿæÿß€å⁄ØÿßŸá €±€∞€±", number: "101", type: "urban" },
      { name: "Ÿæÿß€å⁄ØÿßŸá €±€∞€≤", number: "102", type: "road" },
      { name: "Ÿæÿß€å⁄ØÿßŸá €±€∞€≥", number: "103", type: "urban" }
    ];

    for (const base of defaultBases) {
      await db.insert(bases).values(base).onConflictDoNothing();
    }

    console.log("‚úÖ Ÿæÿß€å⁄ØÿßŸá‚ÄåŸáÿß€å Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ");

    // Create 4 default personnel for system testing
    const defaultPersonnel = [
      {
        firstName: "ÿπŸÑ€å",
        lastName: "ŸÖÿ≠ŸÖÿØ€å",
        nationalId: "1234567890",
        employmentStatus: "official" as const,
        productivityStatus: "productive" as const, 
        driverStatus: "driver" as const
      },
      {
        firstName: "ÿ≠ÿ≥ŸÜ",
        lastName: "ÿßÿ≠ŸÖÿØ€å", 
        nationalId: "1234567891",
        employmentStatus: "contractual" as const,
        productivityStatus: "productive" as const,
        driverStatus: "non_driver" as const
      },
      {
        firstName: "ŸÖÿ≠ŸÖÿØ",
        lastName: "ÿ±ÿ∂ÿß€å€å",
        nationalId: "1234567892", 
        employmentStatus: "official" as const,
        productivityStatus: "productive" as const,
        driverStatus: "driver" as const
      },
      {
        firstName: "ÿßÿ≠ŸÖÿØ",
        lastName: "ÿ≠ÿ≥€åŸÜ€å",
        nationalId: "1234567893",
        employmentStatus: "contractual" as const, 
        productivityStatus: "non_productive" as const,
        driverStatus: "non_driver" as const
      }
    ];

    const createdPersonnel = [];
    for (const person of defaultPersonnel) {
      const [created] = await db.insert(personnel).values(person).onConflictDoNothing().returning();
      if (created) createdPersonnel.push(created);
    }

    console.log("‚úÖ Ÿæÿ±ÿ≥ŸÜŸÑ Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ");

    // Create base profile for ems user (if it doesn't exist)
    if (emsUser || emsUser?.id) {
      const userId = emsUser?.id || (await db.select().from(users).where(eq(users.username, "ems")))[0]?.id;
      
      if (userId) {
        await db.insert(baseProfiles).values({
          userId: userId,
          supervisorName: "ÿ≥ÿ±Ÿæÿ±ÿ≥ÿ™ Ÿæÿß€å⁄ØÿßŸá ÿßŸàÿ±⁄òÿßŸÜÿ≥",
          supervisorNationalId: "0987654321", 
          baseName: "Ÿæÿß€å⁄ØÿßŸá €±€∞€±",
          baseNumber: "101",
          baseType: "urban",
          digitalSignature: null,
          isComplete: true
        }).onConflictDoNothing();

        console.log("‚úÖ Ÿæÿ±ŸàŸÅÿß€åŸÑ Ÿæÿß€å⁄ØÿßŸá ÿ®ÿ±ÿß€å ⁄©ÿßÿ±ÿ®ÿ± ems ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ");

        // Add default base members for ems user (first two personnel)
        if (createdPersonnel.length >= 2) {
          for (let i = 0; i < 2; i++) {
            if (createdPersonnel[i]) {
              await db.insert(baseMembers).values({
                userId: userId,
                personnelId: createdPersonnel[i].id
              }).onConflictDoNothing();
            }
          }
          console.log("‚úÖ ÿßÿπÿ∂ÿß€å Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ Ÿæÿß€å⁄ØÿßŸá ÿ®ÿ±ÿß€å ⁄©ÿßÿ±ÿ®ÿ± ems ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ");
        }
      }
    }

    console.log("üéâ seed ⁄©ÿ±ÿØŸÜ ÿØ€åÿ™ÿßÿ®€åÿ≥ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ™ŸÖÿßŸÖ ÿ¥ÿØ!");

  } catch (error) {
    console.error("‚ùå ÿÆÿ∑ÿß ÿØÿ± seed ⁄©ÿ±ÿØŸÜ ÿØ€åÿ™ÿßÿ®€åÿ≥:", error);
    throw error;
  }
}

// Run seed if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  seedDatabase()
    .then(() => {
      console.log("‚úÖ Seed completed successfully");
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå Seed failed:", error);
      process.exit(1);
    });
}